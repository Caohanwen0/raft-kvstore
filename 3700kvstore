#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random, collections


#################

DEBUG = False

BROADCAST = 'FFFF'
ENCODING = 'utf-8'

LEADER = 'leader'
CANDIDATE = 'candidate'
FOLLOWER = 'follower'

# fields
SRC = 'src'
DST = 'dst'
ENTRIES = 'entries'
KEY = 'key'
VALUE = 'value'
TERM = 'term'
TYPE = 'type'
COMMIT = 'commit'
CLIENT = 'client'
MID = 'MID'
PREV_LOG_IDX = 'prev_log_idx'
PREV_LOG_TERM = 'prev_log_term'
NEXT_IDX = 'next_idx'
LAST_LOG_IDX = 'last_log_idx' #  = len(log) - 1
LAST_LOG_TERM = 'last_log_term' # = log[-1]
CANDIDATE_ID = 'candidate_id'
LOG_LENGTH = 'log_length'

# hyperparameters

HEARTBEAT = 0.15 # in second
FLUSH_TIME = 0.01 # in second
#################

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.leader = BROADCAST

        self.majority = (len(self.others) + 1) // 2

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        self.socket.setblocking(False)
        
        self.term = 0
        self.state = FOLLOWER
        self.log = [{TERM: 0}]

        self.my_vote = None
        
        self.my_votes = [] # previous votes 
        self.timeout = random.uniform(0.3, 0.4)

        self.commited = 0 
        self.last_committed = 0 # commit index of the server
        
        self.database = {}
        self.flush_time = time.time()

        self.cache = [] # Append the current append entries, as they get sent i remove them

        # time info
        self.start_time = time.time() # starting time of this replica
        self.last_heartbeat = time.time() # last time receiving heartbeat
        self.last_append = time.time()
        self.messages_timer = {}
        
        self.no_leader_queue = [] # queue for message caching when there's no leader
        print("Replica %s starting up at %f:" % (self.id, self.start_time), flush=True)
        hello = { SRC: self.id, 
            DST: BROADCAST, 
            LEADER: BROADCAST, 
            TYPE: "hello" 
        }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, msg):
        self.socket.sendto(json.dumps(msg).encode(ENCODING), ('localhost', self.port))
      
    # generate reply message
    def generate_msg(self, src, type, mid):
        return {
            SRC: self.id,
            DST: src,
            LEADER: self.leader,
            TYPE: type,
            MID: mid
        }

    def recv_get(self, msg):
        if self.state == LEADER:
            key = msg[KEY]
            response = self.generate_msg(msg[SRC], 'ok', msg[MID])

            if key in self.database:
                response[VALUE] = self.database[key]
            else:
                response[VALUE] = '' # otherwise just return epsilon 
        # if self is not the leader, redirect to the leader
        elif self.leader != BROADCAST:
            response = self.generate_msg(msg[SRC], 'redirect', msg[MID])

        elif self.leader == BROADCAST:       # if leader is unknown
            self.no_leader_queue.append(msg) # do broadcast

        self.send(response)

    # handle put request
    def recv_put(self, msg):
        if self.state == LEADER and msg != '':
            if msg[MID] in self.messages_timer and time.time() - self.messages_timer[msg[MID]] > 1:
                response = {
                    SRC: self.id,
                    DST: msg[SRC],
                    LEADER: BROADCAST,
                    TYPE: 'fail',
                    MID: msg[MID]
                }

                self.send(response)
                del self.messages_timer[msg[MID]]

            elif msg[MID] not in self.messages_timer:
                self.messages_timer[msg[MID]] = time.time()

            self.log.append({TERM: self.term,
                KEY: msg[KEY],
                VALUE: msg[VALUE],
                CLIENT: msg[SRC],
                MID: msg[MID]
                })
            if self.flush_time - time.time() >= FLUSH_TIME:
                self.send_append_entries(self.others)
                self.flush_time = time.time()

        elif self.state == LEADER: # if self == leader
            self.buffer = 0
            self.send_append_entries(self.others) # append the request to log

        elif self.leader == BROADCAST:# if leader is unknown,
            self.no_leader_queue.append(msg) # append the message to the queue

        else: # redirect to leader
            response = self.generate_msg(msg[SRC], 'redirect', msg[MID])
            self.send(response)

    def request_vote(self, msg):
        if msg[TERM] >= self.term and self.state != LEADER:
            self.state = FOLLOWER
            self.term = msg[TERM]
            self.leader = msg[LEADER]
            self.my_votes = []
            self.my_vote = None

        if self.state == FOLLOWER:
            grant = self.construct_request(msg, 'grant_vote')
            reject = self.construct_request(msg, 'reject_vote')

            # check if the term is most up to date
            if msg[TERM] < self.term:
                self.send(reject)
            elif not (self.my_vote is None or self.my_vote == msg[SRC]):
                self.send(reject)
            # check if the log is most up to date
            elif len(self.log) - 1 > msg[LAST_LOG_IDX]:
                self.send(reject)
            # if log is the same, check the last log term
            elif self.log[-1][TERM] > msg[LAST_LOG_TERM]:
                self.send(reject)
            else:
                self.send(grant)

    # get reject message
    def reject_vote(self, msg): 
        if self.state == CANDIDATE and msg[TERM] >= self.term:
            self.term = msg[TERM]
            self.state = FOLLOWER
            self.my_votes = []
            self.my_vote = None

    # new leader election
    def elect_leader(self):
        self.term += 1
        self.state = CANDIDATE
        self.my_vote = self.id
        self.my_votes = []
        self.my_votes.append(self.id)
        if DEBUG:
            passed = time.time() - self.start_time
            print("Replica %s has started a new election at %f:" % (self.id, passed))

        for other in self.others:
            msg = {
                SRC: self.id,
                DST: other,
                LEADER: self.leader,
                TYPE: 'request_vote',
                TERM: self.term,
                CANDIDATE_ID: self.id,
                LAST_LOG_IDX: len(self.log) - 1,
                LAST_LOG_TERM: self.log[-1][TERM]
            }
            # send election request for all the other servers
            self.send(msg)

    # construct a request
    def construct_request(self, msg, state):
        return {
            SRC: self.id,
            DST: msg[SRC],
            LEADER: self.leader,
            TYPE: state,
            TERM: self.term
        }

    # grant the voting request
    def grant_vote(self, msg):
        if self.state != CANDIDATE:
            return

        # if majority has agreed to vote, current server becomes the leader
        if msg[SRC] not in self.my_votes:
            self.my_votes.append(self.my_votes)
            if len(self.my_votes) >= self.majority + 1:
                if DEBUG:
                    passed = time.time() - self.start_time
                    print("Replica %s is selected as the new leader at %f:" % (self.id, passed))
                self.state = LEADER
                self.leader = self.id
                self.my_votes = []
                self.next_indexes = {}
                self.match_indexes = {}
                for other in self.others:# update logs
                    self.next_indexes[other] = len(self.log)
                    self.match_indexes[other] = 0
            
    # grant the append entries rpc
    def recv_grant_append(self, msg):
        if self.state != LEADER:
            return
        self.next_indexes[msg[SRC]] = msg[NEXT_IDX]
        self.match_indexes[msg[SRC]] = msg[NEXT_IDX] - 1

        # check if the log of the match index is correct
        i = len(self.log) - 1
        while i >= 0:
            if self.log[i][TERM] == self.term:
                count = 0
                for server in self.match_indexes:
                    if self.match_indexes[server] >= i:
                        count += 1
                if count >= self.majority:
                    break
            i -= 1

        # update the commit index
        if i > self.commited:
            self.commited = i
            self.apply_commit()

    def recv_reject_append(self, msg):
        if self.state != LEADER:
            return

        if msg[TERM] > self.term:
            self.state = FOLLOWER # ensure time is the same

        # then select the longest log
        if NEXT_IDX in msg: 
            self.next_indexes[msg[SRC]] = msg[NEXT_IDX]
        else:
            self.next_indexes[msg[SRC]] = self.next_indexes[msg[SRC]] - 1
        self.send_append_entries([msg[SRC]])


    # handle append entries msg from the server
    def append_entries(self, msg):
        if msg[TERM] >= self.term: # if current replica has not updated about the new leader
            self.term = msg[TERM]
            self.state = FOLLOWER # new leader is selected so now myself becomes the follower
            self.leader = msg[LEADER]
            self.my_vote = None
            self.my_votes = []
            for msg in self.no_leader_queue: # if I have received this message before the election finished
                self.send(self.generate_msg(msg[SRC], 'redirect', msg[MID])) # send back
            self.no_leader_queue = []

        if self.state == FOLLOWER: # do vote
            rejection = {
                SRC: self.id,
                DST: msg[SRC],
                LEADER: self.leader,
                TYPE: 'reject_append',
                TERM: self.term
            }

            # grant message
            grant = {
                SRC: self.id,
                DST: msg[SRC],
                LEADER: self.leader,
                TYPE: 'grant_append',
                TERM: self.term
            }

            if msg[TERM] < self.term: # term don't match locally
                self.send(rejection)
                return

            self.last_append = time.time()
            prev_log_index = msg[PREV_LOG_IDX]
            prev_log_term = msg[PREV_LOG_TERM]

            # if log index is not the one the server is looking for that can match with the leader
            # send a reject
            if len(self.log) - 1 < prev_log_index:
                self.send(rejection)
                return

            # check the log for the term, if not equals, reject
            if prev_log_term != self.log[prev_log_index][TERM]:
                for i in range(len(self.log)):
                    if self.log[i][TERM] == self.log[prev_log_index][TERM]:
                        rejection[NEXT_IDX] = i
                        break
                else:
                    rejection[NEXT_IDX] = len(self.log) - 1
                self.send(rejection)
                return

            # if everything matches
            new_entries = msg[ENTRIES]
            self.log = self.log[: prev_log_index + 1] # dump the extra log
            self.log.extend(new_entries) # append to leader's log

            commit = msg[COMMIT]

            if commit > self.commited:
                self.commited = min(commit, len(self.log) - 1)
            grant[NEXT_IDX] = len(self.log)

            # if there are no entries in the server, grand the append
            if msg[ENTRIES] != 0:
                self.send(grant)
            self.apply_commit()

    # check if a command can be executed
    # and execute it if more than majority of people agree
    def apply_commit(self):
        while self.last_committed < self.commited:
            self.last_committed += 1
            key = self.log[self.last_committed][KEY]
            value = self.log[self.last_committed][VALUE]
            self.database[key] = value
            if self.state == LEADER:
                msg = self.generate_msg(self.log[self.last_committed][CLIENT], 'ok', self.log[self.last_committed][MID])
                self.send(msg)

    # react to the append entries from other server
    def send_append_entries(self, others):
        if self.state != LEADER:
            return
        
        for server in others:
            next_index = self.next_indexes[server]
            prev_log_index = next_index - 1
            prev_term = self.log[prev_log_index][TERM]
            entries = self.log[next_index:]
            msg = {
                SRC: self.id,
                DST: server,
                TYPE: 'append_entries',
                TERM: self.term,
                LEADER: self.leader,
                PREV_LOG_IDX: prev_log_index,
                PREV_LOG_TERM: prev_term,
                ENTRIES: entries,
                COMMIT: self.commited
            }
            self.cache.append(msg)
            self.send(msg)
            self.cache.pop()
        
        while self.cache:
            curr_msg = self.cache.pop()
            self.send(curr_msg)
    
        
        
    # entry for message handling
    def handler(self, msg):
        type = msg[TYPE]
        if type == 'get':
            self.recv_get(msg)
        elif type == 'put':
            self.recv_put(msg)
        elif type == 'request_vote':
            self.request_vote(msg)
        elif type == 'append_entries':
            self.append_entries(msg)
        elif type == 'grant_append':
            self.recv_grant_append(msg)
        elif type == 'reject_append':
            self.recv_reject_append(msg)
        elif type == 'grant_vote':
            self.grant_vote(msg)
        elif type == 'reject_vote':
            self.reject_vote(msg)
    
    def run(self):
        self.last_heartbeat = time.time()
        self.last_append = time.time()
        self.flush_time = time.time()
        while True:
            try:
                current_time = time.time()
                data, _ = self.socket.recvfrom(65535)
                msg = data.decode(ENCODING)
                if DEBUG:
                    passed = time.time() - self.start_time
                    print("Replica %s received message '%s' at %f:\n%s" % (self.id, msg, passed), flush=True)
            except BlockingIOError:
                # if not receving heartbeat from the leader
                if current_time - self.last_append >= self.timeout and self.state != LEADER:
                    # then start election
                    # send a fail to everything 
                    print("HELLOOOO")
                    # if some values are yet to committed into the list, replicas sent those values
                    if self.cache:
                        # commit those values, append the entries, 
                        for msg in self.cache:
                            self.send(msg)
                        self.cache = []


                    self.elect_leader()
                    self.last_append = time.time()
        
                if self.state == LEADER and current_time - self.last_heartbeat >= HEARTBEAT:
                    self.send_append_entries(self.others)
                    self.last_heartbeat = time.time()
                continue
            
            msg = json.loads(msg)
            self.handler(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
