#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

#####################


BROADCAST = "FFFF"
# fields
SRC = "src"
DST = "dst"
LEADER = "leader"
TYPE = "type"
MID = "MID"
KEY = "key"
VALUE = "value"
TERM = "term"
CANDIDATE_ID = "candidate_id"
LOG_IDX = "log_idx"
LOG_TERM = "log_term"
ENTRIES = "entries"
NEXT_IDX = "next_index"
LEADER_COMMIT = "leader_commit"

# self-defined type
APPEND_ENTRY  = "append_entry"
TERM = "term"
VOTE = "vote"
GRANT_VOTE = "grant_vote"
GRANT_APPEND = "grant_append"
REJECT_VOTE = "reject_vote"
REJECT_APPEND = "reject_append"

TERMINATOR = b'}\n'

FOLLOWER = "follower"
CANDIDATE = "candidate"
CLIENT = "client"

#####################

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.majority_cnt = ((len(self.others) + 1) // 2) + 1
        self.buffer = b""
        self.leader_id = "0000" # currently believed leader id
        self.identity = FOLLOWER

        self.last_heartbeat = time.time()
        self.last_append = time.time()
        self.start_time = time.time()

        self.database = {}

        self.next_idx = {}
        self.match_idx = {} # volatile state on all leaders

        self.term = 0 # election term

        self.log = [{TERM: 0}, ] # transaction log

        self.commit_idx = 0
        self.last_applied = 0

        self.votes = []
        self.my_vote = None

        coef = int(self.id[3])
        self.election_timeout = 300 + (coef * 10)

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def multicast(self, msg):
        for other in self.others:
            msg[DST] = other
            self.send(msg)
    
    def elect_leader(self): # reelect leader
        self.term += 1
        self.identity = CANDIDATE
        self.my_vote = self.id
        self.votes = [] # clear votes
        self.votes.append(self.id)
        for other in self.others: # for all replicas
            msg = {
                SRC : self.id,
                DST : other,
                LEADER : self.leader_id,
                TYPE : VOTE,
                TERM : self.term,
                LOG_IDX : len(self.log) - 1,
                LOG_TERM : self.log[len(self.log) - 1][TERM]
            }
            self.send(msg)

    # handle vote rejection message
    def reject_vote(self, msg):
        if self.identity == CANDIDATE and msg[TERM] >= self.term:
            self.term = msg[TERM] # udpate current term count
            self.identity = FOLLOWER
            self.my_vote = None
            self.votes = []

    def recv_append_entry(self, msg):
        if msg[TERM] >= self.term:
            self.term = msg[TERM]
            self.identity = FOLLOWER
            self.leader_id = msg[LEADER]
            self.votes = []
            self.my_vote = None

        if self.identity == FOLLOWER:
            if msg[TERM] < self.term:
                return
            
            prev_log_idx = msg[LOG_IDX]
            prev_log_term = msg[LOG_TERM]

            rejection = {
                SRC : self.id,
                DST : msg[SRC],
                LEADER : self.leader_id,
                TYPE : REJECT_APPEND,
                TERM : self.term,
            }

            if len(self.log) - 1 < prev_log_idx:
                rejection[NEXT_IDX] = len(self.log)
                if rejection[DST] != BROADCAST:
                    self.send(rejection)
                else:
                    self.multicast(rejection)
                return

            if self.log[prev_log_idx][TERM] != prev_log_term:
                conflicting_term = self.log[prev_log_idx][TERM]
                for i in range(len(self.log)):
                    if self.log[i][TERM] == conflicting_term:
                        break
                rejection[NEXT_IDX] = i     
                if rejection[DST] != BROADCAST:      
                    self.send(rejection)
                else:
                    self.multicast(rejection)
                return

            log_insert_index = prev_log_idx + 1
            new_entries = msg[ENTRIES]
            self.log = self.log[ : log_insert_index]
            self.log.extend(new_entries)

            leader_commit = msg[LEADER_COMMIT]
            if leader_commit > self.commit_idx:
                self.commit_idx = min(leader_commit, len(self.log) - 1)

            grant = {
                SRC: self.id,
                DST: msg[SRC],
                LEADER: self.leader_id,
                TYPE: GRANT_APPEND,
                TERM: self.term,
                NEXT_IDX: len(self.log)
            }
            if len(msg[ENTRIES]) != 0:
                if grant[DST] != BROADCAST:
                    self.send(grant)
                else:
                    self.multicast(grant)
            self.apply()
            
    def send_append_entry(self, dst_ids, required:bool):
        if self.identity != LEADER :
            return
        for dst_id in dst_ids:
            next_idx = self.next_idx[dst_id]
            prev_log_idx = next_idx - 1
            prev_log_term = self.log[prev_log_idx][TERM]
            entries = self.log[next_idx:]
            msg = {
                SRC : self.id,
                DST : dst_id,
                TYPE : APPEND_ENTRY,
                TERM : self.term,
                LEADER : self.leader_id,
                LOG_IDX : prev_log_idx,
                LOG_TERM : prev_log_term,
                ENTRIES : entries,
                LEADER_COMMIT : self.commit_idx
            }
            if msg[DST] == BROADCAST:
                self.send(msg)
            else:
                self.multicast(msg)

    def recv_grant_append(self, msg):

        if self.identity != LEADER:
            return
        src = msg[SRC]
        self.next_idx[src] = msg[NEXT_IDX]
        self.match_idx[src] = msg[NEXT_IDX] - 1

        i = len(self.log) - 1
        while i >= 0:
            if self.log[i][TERM] == self.term:
                count = 0
                for idx in self.match_idx:
                    if self.match_idx[idx] >= i:
                        count += 1
                if count >= self.majority_cnt - 1:
                    break
            i -= 1
        if i > commit_index:
            commit_index = i
            self.apply()

    def recv_reject_append(self,msg):
        if self.identity != LEADER:
            return
        src_id = msg[SRC]
        if NEXT_IDX in msg: # if message has field 'next_index'
            self.next_idx[src_id] = msg[NEXT_IDX]
        else:
            self.next_idx[src_id] = self.next_idx[src_id] - 1
        self.send_append_entry([src_id,], True)

    def recv_vote(self,msg):
        if msg[TERM] >= self.term:
            self.term = msg[TERM]
            self.identity = FOLLOWER
            self.leader_id = msg[LEADER]
            self.votes = []
            self.my_vote = None

        if self.identity == FOLLOWER:
            grant = {
                SRC: self.id,
                DST: msg[SRC],
                LEADER: self.leader_id,
                TYPE: GRANT_VOTE,
                TERM: self.term
            }
            reject = {
                SRC: self.id,
                DST: msg[SRC],
                LEADER: self.leader_id,
                TYPE: REJECT_VOTE,
                TERM: self.term
            }

            if msg[TERM] < self.term:
                self.send(reject)
                return
            if not (self.my_vote is None or self.my_vote == msg[SRC]):
                self.send(reject)
                return
            if len(self.log) - 1 > msg[LOG_IDX]:
                self.send(reject)
                return
            if self.log[len(self.log) - 1][TERM] > msg[LOG_TERM]:
                self.send(reject)
                return
            self.send(grant)

    def recv_grant_vote(self, msg):
        if self.identity != CANDIDATE:
            return
        if msg[SRC] not in self.votes:
            self.votes.append(self.votes)
            if len(self.votes) >= self.majority_cnt:
                print('Replica %s is selected as the new leader' % self.id)
                self.identity = LEADER
                self.leader_id = self.id
                self.votes = []
                self.next_idx = {}
                self.match_idx = {}
                for other in self.others:
                    self.next_idx[other] = len(self.log)
                    self.match_idx[other] = 0

    def recv_reject_vote(self, msg):
        if self.identity == CANDIDATE and msg[TERM] >= self.term:
            self.term = msg[TERM]
            self.identity = FOLLOWER
            self.votes = []
            self.my_vote = BROADCAST

    def send(self, msg):
        self.socket.sendto(json.dumps(msg).encode('utf-8') + b'\n', ('localhost', self.port))
        # print("Replica %s send message %s." % self.id, json.dumps(msg, indent=2), flush = True)

    def receive(self):
        data = self.socket.recv(65535)
        if (len(data) == 0):
            return None

        self.buffer += data
        msgs = [] # list of dict
        while TERMINATOR in self.buffer:
            position = self.buffer.find(TERMINATOR) + len(TERMINATOR)
            msg_js = json.loads(self.buffer[:position - 1].decode())
            msgs.append(msg_js)
            self.buffer = self.buffer[position:]
        return msgs

    def recv_get(self, msg):
        response = None
        if self.identity == LEADER:
            response = {
                SRC : self.id,
                DST : msg[SRC],
                LEADER : msg[LEADER],
                TYPE : "ok",
                MID : msg[MID]
            }
            # add value attribute
            if msg[KEY] in self.database: 
                # if this data has been put into database before
                response[VALUE] = self.database[msg[KEY]]
            else:
                response[VALUE] = "" 
            if response[DST] != BROADCAST:
                self.send(response) # send message 
            else:
                self.multicast(response)
        else:
            # if not the leader , then redirect this message to leader
            response = {
                SRC : self.id,
                DST : msg[SRC],
                LEADER : self.leader_id,
                TYPE : "redirect",
                MID : msg[MID]
            }
            if response[DST] != BROADCAST:
                self.send(response) # send message 
            else:
                self.multicast(response)

    def apply(self):
        while self.last_applied < self.commit_idx:
            self.last_applied += 1 # update applied
            key = self.log[self.last_applied][KEY]
            value = self.log[self.last_applied][VALUE]
            # update databse
            self.database[key] = value

            if self.identity == LEADER:
                client = self.log[self.last_applied][CLIENT]
                mid = self.log[self.last_applied][MID]
                self.send({
                    SRC : self.id,
                    DST : client,
                    LEADER : self.leader_id,
                    TYPE: "ok",
                    MID : mid
                })

    def recv_put(self, msg):
        if self.identity == LEADER:
            self.log.append({
                TERM : self.term,
                KEY : msg[KEY],
                VALUE : msg[VALUE],
                CLIENT: msg[SRC],
                MID : msg[MID]
            })
            self.send_append_entry(self.others, False)
        else:
            # if not the leader , then redirect this message to leader
            response = {
                SRC : self.id,
                DST : msg[SRC],
                LEADER : self.leader_id,
                TYPE : "redirect",
                MID : msg[MID]
            }
            if response[DST] != BROADCAST:
                self.send(response)
            else:
                self.multicast(response)

    def handler(self, msg):
        print('Replica %s received %s\n' % (self.id,json.dumps(msg, indent=2)))
        type = msg[TYPE]
        if type == "get":
            self.recv_get(msg)
        elif type == "put":
            self.recv_put(msg)
        elif type == VOTE:
            self.recv_vote(msg)
        elif type == GRANT_VOTE:
            self.recv_grant_vote(msg)
        elif type == REJECT_VOTE:
            self.recv_reject_vote(msg)
        elif type == APPEND_ENTRY:
            self.recv_append_entry(msg)
        elif type == GRANT_APPEND:
            self.recv_grant_append(msg)
        elif type == REJECT_APPEND:
            self.recv_reject_append(msg)
        # todo....

    def run(self):
        while True:
            connections = select.select([self.socket], [], [], 0.01)[0]
            if self.socket in connections:
                msgs = self.receive()
                priority, secondary, third = [], [], []
                for msg in msgs:
                    if self.identity == LEADER and msg[TYPE] == GRANT_APPEND:
                        priority.append(msg)
                    elif self.identity == FOLLOWER and msg[TYPE] == APPEND_ENTRY:
                        priority.append(msg)
                    elif msg[SRC] not in self.others:
                        secondary.append(msg)
                    else:
                        third.append(msg)
                for msg in priority:
                    self.handler(msg)
                for msg in secondary:
                    self.handler(msg)
                for msg in third:
                    self.handler(msg) 

            clock = time.time()
            diff_heartbeat = (clock - self.last_heartbeat) * 1000
            diff_append = (clock - self.last_append) * 1000
            if self.identity == LEADER and diff_heartbeat >= 150:
                self.send_append_entry(self.others, False)
                self.last_heartbeat = time.time()
            elif self.identity != LEADER and diff_append >= self.election_timeout:
                self.elect_leader()
                self.last_append = time.time()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
