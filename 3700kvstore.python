#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

#####################

BROADCAST = "FFFF"
# fields
SRC = "src"
DST = "dst"
LEADER = "leader"
TYPE = "type"
MID = "MID"
KEY = "key"
VALUE = "value"

TERMINATOR = b'}\n'

#####################

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.majority_cnt = ((len(self.others) + 1) // 2) + 1
        self.buffer = b""


        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)


    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8') + b'\n', ('localhost', self.port))
        print("Replica %d send message %s." % self.id, json.dumps(message, indent=2), flush = True)


    def get_msg(self, dst, leader, type, mid)->dict:
        return {
            SRC : self.id,
            DST : dst,
            LEADER : leader,
            TYPE : type,
            MID : mid
        }

        

    def receive(self):
        data = self.socket.recv(65535)
        if (len(data) == 0):
            return None

        self.buffer += data
        msgs = [] # list of dict
        while TERMINATOR in self.buffer:
            position = self.buffer.find(TERMINATOR) + len(TERMINATOR)
            msg_js = json.loads(self.buffer[:position - 1].decode())
            msgs.append(msg_js)
            buffer = buffer[position:]
        return msgs



    def run(self):
        while True:
            connections = select.select([self.socket], [], [], 0.01)[0]
            if self.socket in connections:
                msgs = self.receive()




if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
